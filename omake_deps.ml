open Printf

let comment_re = Str.regexp "^[ \t]*\\(#.*\\)?$"
let dep_re = Str.regexp "^\\([^: \t]+\\):\\(.*\\)$"
let list_delim = Str.regexp "[ \t]+"

module S = Set.Make (String)

let set_of_list l = List.fold_left (fun acc x -> S.add x acc) S.empty l
let list_of_set x = S.elements x

let split s =
  List.filter ((<>) "") (Str.split list_delim s)

let get tbl k =
  try Hashtbl.find tbl k
  with Not_found -> S.empty

let add tbl frozen k l =
  if Hashtbl.mem frozen k then (
    eprintf "\
Error: Line starting with \"%s:\" must come earlier in order to satisfy
       dependency order.\n%!" k;
    exit 1
  );
  List.iter (fun k -> Hashtbl.replace frozen k ()) l;
  let known_deps =
    try Hashtbl.find tbl k
    with Not_found -> S.empty
  in
  let indirect_deps = List.fold_left S.union S.empty (List.map (get tbl) l) in
  let direct_deps = set_of_list l in
  Hashtbl.replace tbl k
    (S.union (S.union indirect_deps direct_deps) known_deps)

let parse_deps ic =
  let tbl = Hashtbl.create 100 in
  let frozen = Hashtbl.create 100 in
  let ordered = ref [] in
  try
    while true do
      let line = input_line ic in
      if Str.string_match comment_re line 0 then
        ()
      else
        if Str.string_match dep_re line 0 then
          let k = Str.matched_group 1 line in
          let deps = Str.matched_group 2 line in
          ordered := k :: !ordered;
          add tbl frozen k (split deps)
        else (
          eprintf "Invalid line: %s\n%!" line;
          exit 1
        )
    done;
    assert false
  with End_of_file ->
    (List.rev !ordered,
     Hashtbl.fold (fun k v acc -> (k, list_of_set v) :: acc) tbl [])

let sort_deps orig_order l =
  let a = Array.of_list orig_order in
  let tbl = Hashtbl.create 100 in
  Array.iteri (fun i k -> Hashtbl.add tbl k i) a;
  let get k =
    try Hashtbl.find tbl k
    with Not_found -> -1
  in
  let cmp a b = compare (get a) (get b) in
  List.map (fun (k, l) -> (k, List.sort cmp l)) l

let format_deps l =
  printf "# Auto-generated by omake-deps\n";
  List.iter (
    fun (k, l) ->
      printf "OCAML_LIBS_%s = %s\n"
        k
        (String.concat " "
           (List.map (fun s -> sprintf "../%s/%s" s s) l))
  ) l

let main () =
  let ordered, l = parse_deps stdin in
  let l = sort_deps ordered l in
  format_deps l

let () = main ()
